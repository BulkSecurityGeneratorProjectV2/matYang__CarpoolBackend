package badstudent.model;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;

import org.json.JSONException;
import org.json.JSONObject;

import badstudent.common.Common;
import badstudent.common.Constants;
import badstudent.common.Constants.gender;
import badstudent.common.Constants.userSearchState;
import badstudent.common.Constants.userState;
import badstudent.common.JSONFactory;
import badstudent.interfaces.PesudoModel;

/**
		int userId [int, generated by sql will be good enough, like RenRen]
		String password
		String sessonCode   [session id of the user log-in, will be stored in Redis, don't worry about this in Sql]

		String name
		int level
		int average score
		int total number of transactions

		History List [List of DMMessages this user has been involved in (both owner and requester)]
		Watch List [List of DMMessages this user is interested in]
		Social List [List of users this user in interested in]
		Transaction List [List of all transactions this user is involved in]
		Notification List  [List of all notifications intended for this user]
		ArrayList<String> universityGroup [Format of String split by " "]
		
		int age
		gender gender
		String phone  [exactly 11-digit number]
		String email  [must have @, and at least one . after @, at least four chars after @, maximum 50 chars]
		String qq     [optional]
		String imgPath  [path to the image of the user, images should not be stored in database] 
		Location location   [you know it better than me, location format will be Province-City-Area-School]
		
		boolean emailActivated
		boolean phoneActivated
		boolean emailNotice
		boolean phoneNotice

		
		userStates state  [0 for normal user, -1 for inactivated user, more states reserved for future use]
		searchState	records the main-page search state of the user, can be 1.search by university, 2. search by area, 3. search by university group
		Calendar lastLogIn  [last login time of this user]
		Calendar creationTime
		String fields reserved for payPal/支付宝
 */


public class User implements PesudoModel{

    private int userId;
    private String password;
    private String sessionCode;

    private String name;
    private int level;
    private int averageScore;
    private int totalTranscations;

    private ArrayList<DMMessage> historyList;
    private ArrayList<DMMessage> watchList;
    private ArrayList<User> socialList;
    private ArrayList<Transaction> transactionList;
    private ArrayList<Notification> notificationList;
    private ArrayList<String> universityGroup;

    private int age;
    private gender gender;
    private String phone;
    private String email;
    private String qq;
    private String imgPath;
    private Location location;

    private boolean emailActivated;
    private boolean phoneActivated;
    private boolean emailNotice;
    private boolean phoneNotice;
    private userState state;
    private userSearchState searchState;
    private Calendar lastLogin;
    private Calendar creationTime;
    private String paypal;

    //default constructor for serialization, internal user only
    public User(){
        this.userId = -1;
        this.password = "default";
        this.sessionCode = "default";

        this.name = "default";
        this.level = 0;
        this.averageScore = 0;
        this.totalTranscations = 0;

        this.historyList = new ArrayList<DMMessage>();
        this.watchList = new ArrayList<DMMessage>();
        this.socialList = new ArrayList<User>();
        this.transactionList = new ArrayList<Transaction>();
        this.notificationList = new ArrayList<Notification>();
        this.universityGroup = new ArrayList<String>();
        
        this.age = 0;
        this.gender = Constants.gender.male;
        this.phone = "default";
        this.email = "default";
        this.qq = "default";
        this.imgPath = "default";
        this.location = new Location();

        this.emailActivated = false;
        this.phoneActivated = false;
        this.emailNotice = false;
        this.phoneNotice = false;
        this.state = Constants.userState.normal;
        this.searchState = Constants.userSearchState.universityAsk;
        this.lastLogin = Calendar.getInstance();
        this.creationTime = Calendar.getInstance();
        this.paypal = "default";
    }
    
    //copy constructor
    public User(User user){
        this.userId = user.userId;
        this.password = user.password;
        this.sessionCode = "default";

        this.name = user.name;
        this.level = user.level;
        this.averageScore = user.averageScore;
        this.totalTranscations = user.totalTranscations;

        this.historyList = new ArrayList<DMMessage>(user.historyList);
        this.watchList = new ArrayList<DMMessage>(user.watchList);
        this.socialList = new ArrayList<User>(user.socialList);
        this.transactionList = new ArrayList<Transaction>(user.transactionList);
        this.notificationList = new ArrayList<Notification>(user.notificationList);
        this.universityGroup = new ArrayList<String>(user.universityGroup);

        this.age = user.age;
        this.gender = user.gender;
        this.phone = user.phone;
        this.email = user.email;
        this.qq = user.qq;
        this.imgPath = user.imgPath;
        this.location = new Location(user.location.toString());

        this.emailActivated = user.emailActivated;
        this.phoneActivated = user.phoneActivated;
        this.emailNotice = user.emailNotice;
        this.phoneNotice = user.phoneNotice;
        this.state = user.state;
        this.searchState = user.searchState;
        this.lastLogin = (Calendar) user.lastLogin.clone();
        this.creationTime = (Calendar) user.creationTime.clone();
        this.paypal = user.paypal;
    }

    //create default user with only Id, suggested for testing, internal user only
    public User(int userId){
        this.userId = userId;
        this.password = "default";
        this.sessionCode = "default";

        this.name = "default";
        this.level = 0;
        this.averageScore = 0;
        this.totalTranscations = 0;

        this.historyList = new ArrayList<DMMessage>();
        this.watchList = new ArrayList<DMMessage>();
        this.socialList = new ArrayList<User>();
        this.transactionList = new ArrayList<Transaction>();
        this.notificationList = new ArrayList<Notification>();
        this.universityGroup = new ArrayList<String>();

        this.age = 0;
        this.gender = Constants.gender.male;
        this.phone = "default";
        this.email = "default";
        this.qq = "default";
        this.imgPath = "default";
        this.location = new Location();

        this.emailActivated = false;
        this.phoneActivated = false;
        this.emailNotice = false;
        this.phoneNotice = false;
        this.state = Constants.userState.normal;
        this.searchState = Constants.userSearchState.universityAsk;
        this.lastLogin = Calendar.getInstance();
        this.creationTime = Calendar.getInstance();
        this.paypal = "default";
    }

    /**
     * used for User Registration, suggest use for POST
     * @param password
     * @param gender
     * @param email
     * @param location
     */
    public User(String password, gender gender, String email, Location location){
    	//this.userId
        this.password = password;
        this.sessionCode = "default";

        this.name = "";
        this.level = 0;
        this.averageScore = 0;
        this.totalTranscations = 0;

        this.historyList = new ArrayList<DMMessage>();
        this.watchList = new ArrayList<DMMessage>();
        this.socialList = new ArrayList<User>();
        this.transactionList = new ArrayList<Transaction>();
        this.notificationList = new ArrayList<Notification>();
        this.universityGroup = new ArrayList<String>();

        this.age = 0;
        this.gender = gender;
        this.phone = "00000000000";
        this.email = email;
        this.qq = "000000000";
        this.imgPath = "";
        this.location = location;

        this.emailActivated = false;
        this.phoneActivated = false;
        this.emailNotice = false;
        this.phoneNotice = false;
        this.state = Constants.userState.normal;
        this.searchState = Constants.userSearchState.universityAsk;
        this.lastLogin = Calendar.getInstance();
        this.creationTime = Calendar.getInstance();
        this.paypal = "";

    }


    /**
     * This constructor is designed to construct the User Object and send it back for TopBar uses
     * @param userId
     * @param name
     * @param level
     * @param averageScore
     * @param totalTransition
     * @param watchList     the DMMessages are constructed using a specific constructor, as specified in the DMDMMessage constructor comments
     * @param socialList
     * @param notificationList
     * @param universityGroup
     * @param age
     * @param gender
     * @param phone
     * @param email
     * @param qq
     * @param imgPath
     * @param location
     * @param emailActivated
     * @param phoneActivated
     * @param emailNotice
     * @param phoneNotice
     * @param state
     * @param cal
     * @param paypal
     */
    public User(int userId, String name, int level, int averageScore, int totalTransition,
    		ArrayList<DMMessage> watchList, ArrayList<User> socialList,
    		ArrayList<Notification> notificationList, ArrayList<String> universityGroup,
    		int age, gender gender, String phone, String email, String qq, String imgPath,
    		Location location, boolean emailActivated, boolean phoneActivated,
    		boolean emailNotice, boolean phoneNotice, userState state,
    		userSearchState searchState, Calendar cal, Calendar creationTime ,String paypal ){
        this.userId = userId;
        this.password = "default";
        this.sessionCode = "default";

        this.name = name;
        this.level = level;
        this.averageScore = averageScore;
        this.totalTranscations = totalTransition;

        this.historyList = new ArrayList<DMMessage>();
        this.watchList = watchList;
        this.socialList = socialList;
        this.transactionList = new ArrayList<Transaction>();
        this.notificationList = notificationList;
        this.universityGroup = universityGroup;

        this.age = age;
        this.gender = gender;
        this.phone = phone;
        this.email = email;
        this.qq = qq;
        this.imgPath = imgPath;
        this.location = location;

        this.emailActivated = emailActivated;
        this.phoneActivated = phoneActivated;
        this.emailNotice = emailNotice;
        this.phoneNotice = phoneNotice;
        this.state = state;
        this.searchState = searchState;
        this.lastLogin = cal;
        this.creationTime = creationTime;
        this.paypal = paypal;
    }

    /**
     * This constructor is designed for personal-page-main page uses
     * @param userId       
     * @param password
     * @param name
     * @param level
     * @param averageScore
     * @param totalTransition
     * @param historyList		the DMMessages are constructed using a specific constructor, as specified in the DMDMMessage constructor comments
     * @param watchList			the DMMessages are constructed using a specific constructor, as specified in the DMDMMessage constructor comments
     * @param socialList
     * @param age
     * @param gender
     * @param phone
     * @param email
     * @param qq
     * @param imgPath
     * @param location
     * @param emailActivated
     * @param phoneActivated
     * @param emailNotice
     * @param phoneNotice
     * @param state
     * @param cal
     * @param paypal
     */
    public User(int userId, String name, int level, int averageScore, int totalTransition,
    		ArrayList<DMMessage> historyList, ArrayList<DMMessage> watchList,
    		ArrayList<User> socialList, int age, gender gender, String phone,
    		String email, String qq, String imgPath, Location location, boolean emailActivated,
    		boolean phoneActivated, boolean emailNotice, boolean phoneNotice, userState state,
    		userSearchState searchState, Calendar cal, Calendar creationTime, String paypal ){
        this.userId = userId;
        this.password = "default";
        this.sessionCode = "default";

        this.name = name;
        this.level = level;
        this.averageScore = averageScore;
        this.totalTranscations = totalTransition;

        this.historyList = historyList;
        this.watchList = watchList;
        this.socialList = socialList;
        this.transactionList = new ArrayList<Transaction>();
        this.notificationList = new ArrayList<Notification>();
        this.universityGroup = new ArrayList<String>();

        this.age = age;
        this.gender = gender;
        this.phone = phone;
        this.email = email;
        this.qq = qq;
        this.imgPath = imgPath;
        this.location = location;

        this.emailActivated = emailActivated;
        this.phoneActivated = phoneActivated;
        this.emailNotice = emailNotice;
        this.phoneNotice = phoneNotice;
        this.state = state;
        this.searchState = searchState;
        this.lastLogin = cal;
        this.creationTime = creationTime;
        this.paypal = paypal;
    }


    //used to construct full user, suggest use for dumping data back and testing
    public User(int userId, String password, String name, int level, int averageScore,
    		int totalTransition, ArrayList<DMMessage> historyList, ArrayList<DMMessage> watchList,
    		ArrayList<User> socialList, ArrayList<Transaction> transactionList,
    		ArrayList<Notification> notificationList, ArrayList<String> universityGroup,
    		int age, gender gender, String phone, String email, String qq, String imgPath,
    		Location location, boolean emailActivated, boolean phoneActivated,
    		boolean emailNotice, boolean phoneNotice, userState state,
    		userSearchState searchState ,Calendar cal, Calendar creationTime, String paypal){
        this.userId = userId;
        this.password = password;
        this.sessionCode = "default";

        this.name = name;
        this.level = level;
        this.averageScore = averageScore;
        this.totalTranscations = totalTransition;

        this.historyList = historyList;
        this.watchList = watchList;
        this.socialList = socialList;
        this.transactionList = transactionList;
        this.notificationList = notificationList;
        this.universityGroup = universityGroup;

        this.age = age;
        this.gender = gender;
        this.phone = phone;
        this.email = email;
        this.qq = qq;
        this.imgPath = imgPath;
        this.location = location;

        this.emailActivated = emailActivated;
        this.phoneActivated = phoneActivated;
        this.emailNotice = emailNotice;
        this.phoneNotice = phoneNotice;
        this.state = state;
        this.searchState = searchState;
        this.lastLogin = cal;
        this.creationTime = creationTime;
        this.paypal = paypal;
    }

	@Override
    public String toString() {
        return "User [userId=" + userId + ", password=" + password
                + ", sessionCode=" + sessionCode + ", name=" + name
                + ", level=" + level + ", averageScore=" + averageScore
                + ", totalTranscations=" + totalTranscations
                + ", historyList=" + historyList + ", watchList="
                + watchList + ", socialList=" + socialList
                + ", transactionList=" + transactionList
                + ", notificationList=" + notificationList
                + ", universityGroup=" + universityGroup + ", age=" + age
                + ", gender=" + gender + ", phone=" + phone + ", email="
                + email + ", qq=" + qq + ", imgPath=" + imgPath
                + ", location=" + location + ", emailActivated="
                + emailActivated + ", phoneActivated=" + phoneActivated
                + ", emailNotice=" + emailNotice + ", phoneNotice="
                + phoneNotice + ", state=" + state + ", searchState="
                + searchState + ", lastLogin=" + lastLogin
                + ", creationTime=" + creationTime + ", paypal=" + paypal
                + "]";
    }
	
	public String toNotificationSummary(){
		return this.name;
	}

    public int getUserId() {
        return userId;
    }

    public void setUserId(int id) {
        this.userId = id;
    }

    public String getPassword() throws Exception{
        String caller = Common.getCallerName();
        //Common.d("Caller name is: "+caller);
        if(caller.equals("addUserToDatabase") || caller.equals("UpdateUserInDatabase")){
            return this.password;
        }else{
            throw new Exception("Accessing user password without permission.");
        }
    }

    public boolean isPasswordCorrect(String password) {
        return this.password.equals(password);
    }

    public void setPassword(String oldPassword,String newPassword) throws Exception {
        String caller = Common.getCallerName();
        if(caller.equals("resetUserPassword")){
            this.password = newPassword;
            return;
        }
        if(this.password.equals(oldPassword)){
            this.password = newPassword;
        }else{
            throw new Exception("old Password is not correct");
        }
    }

    public String getSessionCode() {
        return sessionCode;
    }

    public void setSessionCode(String sessionCode) {
        this.sessionCode = sessionCode;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getLevel() {
        return level;
    }

    public void setLevel(int level) {
        this.level = level;
    }

    public int getAverageScore() {
        return averageScore;
    }

    public void setAverageScore(int averageScore) {
        this.averageScore = averageScore;
    }

    public int getTotalTranscations() {
        return totalTranscations;
    }

    public void setTotalTranscations(int totalTranscations) {
        this.totalTranscations = totalTranscations;
    }

    public ArrayList<DMMessage> getHistoryList() {
        return historyList;
    }

    public void setHistoryList(ArrayList<DMMessage> historyList) {
        this.historyList = historyList;
    }

    public ArrayList<DMMessage> getWatchList() {
        return watchList;
    }

    public void setWatchList(ArrayList<DMMessage> watchList) {
        this.watchList = watchList;
    }

    public ArrayList<User> getSocialList() {
        return socialList;
    }

    public void setSocialList(ArrayList<User> socialList) {
        this.socialList = socialList;
    }

    public ArrayList<Transaction> getTransactionList() {
        return transactionList;
    }

    public ArrayList<String> getUniversityGroup() {
        return universityGroup;
    }

    public String getUniversityGroupString() {
        String retVal="";
        for(String str : this.universityGroup){
            retVal = retVal + str + "-";
        }
        if(retVal=="" || retVal.length()==1){
            return "";
        }else{
            return retVal.substring(0,retVal.length()-1);
        }
    }

    public void setUniversityGroup(ArrayList<String> universityGroup) {
        this.universityGroup = universityGroup;
    }

    public boolean isEmailNotice() {
        return emailNotice;
    }

    public void setEmailNotice(boolean emailNotice) {
        this.emailNotice = emailNotice;
    }

    public boolean isPhoneNotice() {
        return phoneNotice;
    }

    public void setPhoneNotice(boolean phoneNotice) {
        this.phoneNotice = phoneNotice;
    }

    public void setTransactionList(ArrayList<Transaction> transactionList) {
        this.transactionList = transactionList;
    }

    public ArrayList<Notification> getNotificationList() {
        return notificationList;
    }

    public void setNotificationList(ArrayList<Notification> notificationList) {
        this.notificationList = notificationList;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public gender getGender() {
        return gender;
    }

    public void setGender(gender gender) {
        this.gender = gender;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getQq() {
        return qq;
    }

    public void setQq(String qq) {
        this.qq = qq;
    }

    public String getImgPath() {
        return imgPath;
    }

    public void setImgPath(String imgPath) {
        this.imgPath = imgPath;
    }

    public Location getLocation() {
        return location;
    }

    public void setLocation(Location location) {
        this.location = location;
    }

    public boolean isEmailActivated() {
        return this.emailActivated;
    }

    public void setEmailActivated(boolean emailActivated) {
        this.emailActivated = emailActivated;
    }

    public boolean isPhoneActivated() {
        return this.phoneActivated;
    }

    public void setPhoneActivated(boolean phoneActivated) {
        this.phoneActivated = phoneActivated;
    }

    public userState getState() {
        return state;
    }

    public void setState(userState state) {
        this.state = state;
    }

    public userSearchState getSearchState() {
        return searchState;
    }

    public void setSearchState(userSearchState searchState) {
        this.searchState = searchState;
    }

    public Calendar getCreationTime() {
        return creationTime;
    }

    public void setCreationTime(Calendar creationTime) {
        this.creationTime = creationTime;
    }

    public Calendar getLastLogin() {
        return lastLogin;
    }

    public void setLastLogin(Calendar lastLogin) {
        this.lastLogin = lastLogin;
    }

    public String getPaypal() {
        return paypal;
    }

    public void setPaypal(String paypal) {
        this.paypal = paypal;
    }
    
    /**
     * (corresponding to the UserContructor specified above for constructing topBar users)
     * ****user this in most cases in UserDaoSerivce before return
     * get ride to following fields: password, sessionCode, historyList, transactionList
     * for watchList<DMMessage>, apply DMessage prepareBrief() to each message
     * for socialList<User>, apply prepareSocialUser to each user
     * TODO:
     * for notificationList, refer to the only notification constructor specified for constructing notifications for sending back
     */
    public void prepareTopBarUser(){
        this.password = Constants.goofyPasswordTrickHackers;
        this.sessionCode = "";
        this.historyList = new ArrayList<DMMessage>();
        this.transactionList = new ArrayList<Transaction>();
        ArrayList<DMMessage> watchList = new ArrayList<DMMessage>();
        for(DMMessage message : this.watchList){
            message.prepareBrief();
            watchList.add(message);
        }
        this.watchList = watchList;
        ArrayList<User> socialList = new ArrayList<User>();
        for(User user : this.socialList){
            user.prepareSocialUser();
            socialList.add(user);
        }
        this.socialList = socialList;
    }
    
    /**
     * (corresponding to the UserContructor specified above for personal page users)
     * *****note this is used to return the user object for main page, use this in UserDaoService :: getUserById, or any other places where the user object is intend for main page
     * get ride of the following fields: password. sessionCode, transactionList, notificationList, universityGroup
     * for historyList<DMMessage>, apply DMMessage prepareSimple() to each message
     * for watchList<DMMessage>, apply DMMessage prepareBrief() to each message
     * for socialList<User>, apply prepareSocialUser to each user
     */
    public void preparePersonalUser(){
    	this.password = "";
    	this.sessionCode = "";
    	this.transactionList = new ArrayList<Transaction>();
    	this.notificationList = new ArrayList<Notification>();
    	this.universityGroup = new ArrayList<String>();
    	ArrayList<DMMessage> historyList = new ArrayList<DMMessage>();
    	for(DMMessage message : this.historyList){
    	    message.prepareSimple();
    	    historyList.add(message);
    	}
    	this.historyList = historyList;
    	ArrayList<DMMessage> watchList = new ArrayList<DMMessage>();
        for(DMMessage message : this.watchList){
            message.prepareBrief();
            watchList.add(message);
        }
        this.watchList = watchList;
        ArrayList<User> socialList = new ArrayList<User>();
        for(User user : this.socialList){
            user.prepareSocialUser();
            socialList.add(user);
        }
        this.socialList = socialList;
    }
    
    /**
     * ****this is user for all the users in the social list
     * get rid of all other fields, keep only:
     * userId 
     * imgPath
     * name 
     * gender
     * level 
     * average score 
     * location
     */
    public void prepareSocialUser(){
    	this.password = "";
        this.historyList = new ArrayList<DMMessage>();
        this.watchList = new ArrayList<DMMessage>();
        this.socialList = new ArrayList<User>();
        this.transactionList = new ArrayList<Transaction>();
        this.notificationList = new ArrayList<Notification>();
        this.universityGroup = new ArrayList<String>();
        this.phone = "";
        this.email = "";
        this.qq = "";
        this.paypal = "";
    }


    /** 
     * check if user can be logged in
     * @return  if the user is able to be logged in, etc, state == normal, emailActivated == true
     */
    public boolean isAbleToLogin(){
        //TODO
        return this.isEmailActivated();
    }

    /**
     * check if existing user is valid, potentially has to look into database
     * @param user
     * @return
     */
    public boolean isUserValid(){
        //TODO
        return true;
    }

    /**
     * check if newUser is valid, potentially has to look into database
     * checks if the newly registered is valid
     */
    public boolean isNewUserValid(){
        //isEmailUserNameAvailable(newUser.getEmail(), newUser.getUserName());
        //TODO	
        return true;
    }



    /**
     * check if password is in a valid format
     * @param password
     * @return true if password is valid
     */
    public static boolean isPasswordFormatValid(String password){
        if (password == null || password.length() == 0 || password.length() > Constants.maxPasswordLength){
            return false;
        }
        return true;
    }

    /**
     * check if user's name is in a valid format
     * @param userName
     * @return true if name is valid
     */
    public static boolean isNameFormatValid(String userName){
        if (userName == null || userName.length() == 0 || userName.length() > Constants.maxUserNameLength){
            return false;
        }
        //check for @
        if (userName.indexOf("@") >= 0){
            return false;
        }
        //check for all-number userName
        for (int i = 0; i < userName.length(); i++) {
            if (Character.isLetter(userName.charAt(i)) == true) {
                return true;
            }
        }
        return false;
    }

    /**
     * check if age is valid
     * @param age
     * @return true if age is valid
     */
    public static boolean isAgeValid(int age){
        if(age>5 && age<99){
            return true;
        }
        return false;
    }

	public static boolean isGenderValid(gender gender) {
		// TODO
		return true;
	}

	/**
	 * if the searchState is valid for currently user, currently not null, between 0-5 is good
	 * @param searchState
	 * @return
	 */
	public static boolean isSearchStateValid(userSearchState searchState) {
		// TODO 
		return true;
	}

	public JSONObject toJSON(){
		JSONObject jsonUser = new JSONObject(this);
		try {
			jsonUser.put("lastLogin", Common.CalendarToUTCString(this.getLastLogin()));
			jsonUser.put("creationTime", Common.CalendarToUTCString(this.getCreationTime()));
			
			jsonUser.put("location", this.location.toJSON());
			jsonUser.put("historyList", JSONFactory.toJSON(this.getHistoryList()));
			jsonUser.put("watchList", JSONFactory.toJSON(this.getWatchList()));
			jsonUser.put("socialList", JSONFactory.toJSON(this.getSocialList()));
			jsonUser.put("transactionList", JSONFactory.toJSON(this.getTransactionList()));
			jsonUser.put("notificationList", JSONFactory.toJSON(this.getNotificationList()));
			
			jsonUser.put("universityGroup", JSONFactory.toJSON_arr_str(this.getUniversityGroup()));
			
			jsonUser.put("gender", this.getGender());
			jsonUser.put("state", this.getState());
			jsonUser.put("searchState", this.getSearchState());
		} catch (JSONException e) {
			e.printStackTrace();
		}
		
		return jsonUser;
	}
	
	
}

